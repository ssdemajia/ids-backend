from flask import Blueprint, request, jsonify, make_response
from core.vul_scan import get_system_info, vul_scan
from pymongo import MongoClient
from core.monitor import MonitorJsonEncoder
from core.utils import get_loc

import json
import os
import time
import multiprocessing

nse_path = os.path.join(os.getcwd(), 'nse')
RETRY_TIMES = 5
vulnerability = Blueprint('vul', __name__)


@vulnerability.route('/scanner', methods=["POST"])
def get_systems_info():
    data = request.get_json()
    if "ip" not in data:
        return jsonify({
            'code': 50004,
            'result': "invalid ip address"
        })
    ip = data['ip']
    info = get_system_info(ip, nse_path)
    return jsonify({
        'code': 20000,
        'result': info
    })


@vulnerability.route('/scan', methods=['POST'])
def scan_by_plc_info():
    data = request.get_json()
    if "info" not in data:
        return jsonify({
            'code': 50004,
            'result': "invalid ip address"
        })
    info = data['info']
    result = vul_scan(info)

    result = {
        'code': 20000,
        'result': result
    }
    result = json.dumps(result, cls=MonitorJsonEncoder)
    response = make_response(result)
    response.headers['Content-Type'] = 'application/json'
    return response


@vulnerability.route('/list', methods=['POST'])
def get_vulnerability():
    # use for vulnerability library
    data = request.get_json()
    start = int(data['start'])
    end = int(data['end'])
    mongo = MongoClient()
    db = mongo.ids
    vulner = db.vulnerability
    cursor = vulner.find().limit(end - start).skip(start)
    result = list(cursor)
    cursor = vulner.find().count()
    result = {
        'code': 20000,
        'result': result,
        'count': cursor
    }
    result = json.dumps(result, cls=MonitorJsonEncoder)
    response = make_response(result)
    response.headers['Content-Type'] = 'application/json'
    return response


@vulnerability.route('/top', methods=["GET"])
def get_vul_profile():
    """
    get vulnerability top10 list
    :return:
    """
    mongo = MongoClient()
    db = mongo.ids
    vuls = db.vulnerability
    result = vuls.find().sort("date", -1).limit(10)
    result = list(result)
    for item in result:
        item['level'] = item['level'].split(' ')[0]
    result = {
        'code': 20000,
        'result': result
    }
    result = json.dumps(result, cls=MonitorJsonEncoder)
    response = make_response(result)
    response.headers['Content-Type'] = 'application/json'
    return response


@vulnerability.route('/save', methods=["POST"])
def save_scan_record():
    data = request.get_json()
    if 'record' not in data:
        return jsonify({
            'code': 50004,
            'result': 'post data error'
        })
    record = data['record']
    mongo = MongoClient()
    db = mongo.ids
    record_collect = db.record
    r = list(record_collect.find({'ip': record['ip']}))
    if len(r) == 0:
        record_collect.insert(record)
        result = 'success'
    else:
        result = 'duplicate'
    print(result)
    return jsonify({
        'code': 20000,
        'result': result
    })


@vulnerability.route('/scan/all', methods=["GET"])
def get_all_scan_tasks():
    mongo = MongoClient()
    db = mongo.ids
    task_collect = db.task
    result = {
        'code': 20000,
        'result': list(task_collect.find())
    }
    result = json.dumps(result, cls=MonitorJsonEncoder)
    response = make_response(result)
    response.headers['Content-Type'] = 'application/json'
    return response


@vulnerability.route('/delete', methods=["POST"])
def delete_record():
    data = request.get_json()
    if 'name' not in data:
        return jsonify({
            'code': 50004,
            'result': 'post name error'
        })
    name = data['name']
    mongo = MongoClient()
    db = mongo.ids
    task_collect = db.task
    task_collect.remove({"name": name})
    return jsonify({
        'code': 20000,
        'result': 'success'
    })


level_to_index = {
    '高': 0,
    '中': 1,
    '低': 2
}


def worker(ips, step, name):
    mongo = MongoClient()
    ids = mongo.ids
    task = {
        'name': name,
        'result': [],
        'date': time.strftime('%Y-%m-%d', time.localtime()),
        'status': 0
    }
    ids.task.insert(task)

    def subworks(ip):
        new_task = ids.task.find_one({'name': name})

        ip_info = list(ids.record.find({'ip': ip}))
        if len(ip_info) != 0:
            info = ip_info[0]
        else:
            info = get_system_info(ip, nse_path)
            address = get_loc(ip)

            if address is None:
                for retry in range(RETRY_TIMES):
                    time.sleep(retry)
                    address = get_loc(ip)
                    if address is not None:
                        break
            if address is None:
                info['error'] = 'network error'
            else:
                info['longitude'], info['latitude'], info['address'] = address
        info['ip'] = ip
        if info is None:
            info['error'] = '不支持机型'
        else:
            vuls = vul_scan(info['info']['key'], info['port'])
            ids.vuls.insert({
                'ip': ip,
                'vuls': vuls
            })
            info['vul_cat'] = [0, 0, 0]  # high, middle, low
            for vul in vuls:
                if len(vul['level']) == 0:
                    continue
                level = vul['level'][0]
                index = level_to_index[level]
                info['vul_cat'][index] += 1
        new_task['result'].append(info)
        new_task['status'] += step
        ids.task.replace_one({'name': name}, new_task)

    for ip in ips:
        subworks(ip)


@vulnerability.route('/create_task', methods=['POST'])
def create_task():
    data = request.get_json()
    ips = data['ips']
    name = data['name']
    step = 100 / len(ips) + 1
    mongo = MongoClient()
    ids = mongo.ids
    tasks = ids.task
    current_task = tasks.find_one({'name': name})
    if current_task is not None:
        return jsonify({
            'code': 50004,
            'error': 'already have'
        })
    p = multiprocessing.Process(target=worker, args=(ips, step, name))
    p.start()
    return jsonify({
        'code': 20000,
    })


@vulnerability.route('/vuls', methods=['GET'])
def send_vuls():
    ip = request.args.get('ip')
    # data = request.get_json()
    mongo = MongoClient()
    ids = mongo.ids
    vuls = ids.vuls
    info = vuls.find_one({'ip': ip})
    if len(info) == 0:
        result = []
    else:
        result = info['vuls']
    result = {
        'code': 20000,
        'result': result
    }
    result = json.dumps(result, cls=MonitorJsonEncoder)
    response = make_response(result)
    response.headers['Content-Type'] = 'application/json'
    return response
